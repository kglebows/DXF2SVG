#!/usr/bin/env python3
"""
Nowa wersja Interactive GUI z zak≈Çadkami i naprawionym przypisywaniem
Panel sterowania podzielony na zak≈Çadki dla lepszej organizacji
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import os
import sys
import subprocess
import threading
from PIL import Image, ImageTk, ImageDraw, ImageFont
import io
import xml.etree.ElementTree as ET
from src.config.config_manager import ConfigManager, ConfigTab
from tkinter import font
import re

# Dodaj ≈õcie≈ºkƒô do modu≈Ç√≥w projektu
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Import modu≈Ç√≥w projektu
try:
    from src.core.dxf2svg import main as convert_dxf_to_svg, process_dxf
    from src.core.config import *
    from src.utils.console_logger import logger
    from src.interactive.interactive_editor import get_unassigned_texts, get_unassigned_segments
    from src.gui.simple_svg_viewer import SimpleSVGViewer
    from src.interactive.assignment_manager import AssignmentManager
except ImportError as e:
    print(f"B≈ÇƒÖd importu: {e}")
    sys.exit(1)


class InteractiveGUI:
    """G≈Ç√≥wna klasa GUI z zak≈Çadkami"""
    
    def __init__(self, config_file=None):
        self.root = tk.Tk()
        self.root.title("DXF2SVG - Interaktywny Edytor")
        self.root.geometry("1400x900")
        self.root.minsize(1000, 700)
        
        # Inicjalizuj mened≈ºer konfiguracji
        self.config_manager = ConfigManager()
        if config_file:
            self.config_manager.load_config(config_file)
            logger.info(f"Za≈Çadowano konfiguracjƒô: {config_file}")
        self.config_manager.apply_to_config_module()
        
        # Zmienne
        self.current_dxf_path = tk.StringVar()
        self.current_svg_path = tk.StringVar(value=self.config_manager.get('STRUCTURED_SVG_OUTPUT', 'output_structured.svg'))
        self.processing = False
        self.last_conversion_data = None
        self.current_display_mode = tk.StringVar(value="structured")
        
        # Zmienne dla trybu interaktywnego
        self.all_texts = []  # Wszystkie teksty
        self.all_segments = []  # Wszystkie segmenty
        self.unassigned_texts = []  # Nieprzypisane teksty
        self.unassigned_segments = []  # Nieprzypisane segmenty
        self.assigned_data = {}  # Dane przypisa≈Ñ
        self.assignment_changes = {
            'new_assignments': [],
            'skipped_texts': []
        }
        
        # Centralny mened≈ºer przypisa≈Ñ
        self.assignment_manager = None
        
        # Opcje GUI
        self.auto_refresh_svg = tk.BooleanVar(value=True)  # Domy≈õlnie w≈ÇƒÖczone
        
        # Kontrola konwersji
        self.conversion_cancelled = False
        self.conversion_thread = None
        
        # Zaznaczone elementy w GUI
        self.selected_text_index = None
        self.selected_segment_index = None
        
        # Zapamiƒôtane wybory
        self.stored_text = None
        self.stored_text_data = None
        self.stored_segment = None
        self.stored_segment_data = None
        
        # Style
        self.setup_styles()
        
        # Interfejs
        self.create_interface()
        
        # Automatyczne ≈Çadowanie domy≈õlnych plik√≥w
        self.load_default_files()
    
    def setup_styles(self):
        """Konfiguracja styl√≥w"""
        style = ttk.Style()
        
        # Konfiguracja kolor√≥w
        style.configure('Title.TLabel', font=('Arial', 12, 'bold'))
        style.configure('Success.TLabel', foreground='green')
        style.configure('Error.TLabel', foreground='red')
        style.configure('Info.TLabel', foreground='blue')
        
        # Style przycisk√≥w
        style.configure('Success.TButton', foreground='darkgreen', font=('Arial', 9, 'bold'))
    
    def create_interface(self):
        """Tworzenie interfejsu u≈ºytkownika"""
        # G≈Ç√≥wny kontener z mo≈ºliwo≈õciƒÖ zmiany szeroko≈õci paneli
        self.main_paned = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)
        self.main_paned.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Panel lewy z zak≈Çadkami (sterowanie) - ramka z sta≈ÇƒÖ szeroko≈õciƒÖ poczƒÖtkowƒÖ
        self.control_frame = ttk.Frame(self.main_paned)
        self.main_paned.add(self.control_frame, weight=0)
        
        # Panel prawy (podglƒÖd SVG)
        self.svg_frame = ttk.Frame(self.main_paned)
        self.main_paned.add(self.svg_frame, weight=1)
        
        # Ustaw poczƒÖtkowƒÖ pozycjƒô podzia≈Çu (380px dla panelu sterowania)
        self.root.after(100, lambda: self.main_paned.sashpos(0, 380))
        
        # Utw√≥rz zawarto≈õƒá paneli
        self.create_control_panel_with_tabs(self.control_frame)
        self.create_svg_panel(self.svg_frame)
    
    def create_control_panel_with_tabs(self, parent):
        """Panel sterowania z zak≈Çadkami"""
        # Tytu≈Ç
        title_label = ttk.Label(parent, text="Panel Sterowania", style='Title.TLabel')
        title_label.pack(pady=(0, 10))
        
        # Notebook dla zak≈Çadek
        self.notebook = ttk.Notebook(parent)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # Zak≈Çadka 1: Pliki i Konwersja
        self.create_files_tab()
        
        # Zak≈Çadka 2: Widok SVG
        self.create_view_tab()
        
        # Zak≈Çadka 3: Tryb Interaktywny
        self.create_interactive_tab()
        
        # Zak≈Çadka 4: Konfiguracja
        self.create_config_tab()
        
        # Zak≈Çadka 5: Status i Logi
        self.create_status_tab()
    
    def create_files_tab(self):
        """Zak≈Çadka: Pliki i Konwersja z integracjƒÖ konfiguracji"""
        files_frame = ttk.Frame(self.notebook)
        self.notebook.add(files_frame, text="üìÅ Pliki i Konwersja")
        
        # Sekcja aktualnej konfiguracji
        config_section = ttk.LabelFrame(files_frame, text="Aktualna Konfiguracja", padding=10)
        config_section.pack(fill=tk.X, pady=(5, 10))
        
        # Nazwa konfiguracji i prze≈ÇƒÖczanie
        config_header_frame = ttk.Frame(config_section)
        config_header_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(config_header_frame, text="Konfiguracja:").pack(side=tk.LEFT)
        self.current_config_var = tk.StringVar(value=self.config_manager.current_config_name)
        self.config_combo = ttk.Combobox(config_header_frame, textvariable=self.current_config_var,
                                        values=self.config_manager.get_available_configs(),
                                        state='readonly', width=20)
        self.config_combo.pack(side=tk.LEFT, padx=(5, 10))
        self.config_combo.bind('<<ComboboxSelected>>', self.on_config_change)
        
        ttk.Button(config_header_frame, text="Od≈õwie≈º listƒô", 
                  command=self.refresh_config_list).pack(side=tk.LEFT, padx=(5, 0))
        
        # Parametry konfiguracji (read-only)
        config_info_frame = ttk.Frame(config_section)
        config_info_frame.pack(fill=tk.X)
        
        # Lewa kolumna
        left_info = ttk.Frame(config_info_frame)
        left_info.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        self.config_station_label = ttk.Label(left_info, text="", font=('Arial', 9))
        self.config_station_label.pack(anchor=tk.W)
        
        self.config_format_label = ttk.Label(left_info, text="", font=('Arial', 9))
        self.config_format_label.pack(anchor=tk.W)
        
        self.config_layers_label = ttk.Label(left_info, text="", font=('Arial', 9))
        self.config_layers_label.pack(anchor=tk.W)
        
        # Prawa kolumna
        right_info = ttk.Frame(config_info_frame)
        right_info.pack(side=tk.RIGHT, fill=tk.X, expand=True)
        
        self.config_dxf_label = ttk.Label(right_info, text="", font=('Arial', 9))
        self.config_dxf_label.pack(anchor=tk.W)
        
        self.config_svg_label = ttk.Label(right_info, text="", font=('Arial', 9))
        self.config_svg_label.pack(anchor=tk.W)
        
        self.config_search_label = ttk.Label(right_info, text="", font=('Arial', 9))
        self.config_search_label.pack(anchor=tk.W)
        
        # Sekcja konwersji
        conv_section = ttk.LabelFrame(files_frame, text="Konwersja DXF ‚Üí SVG", padding=10)
        conv_section.pack(fill=tk.X, pady=(0, 10))
        
        # Informacja o procesie
        info_label = ttk.Label(conv_section, 
                              text="Konwersja rozpocznie analizƒô pliku DXF z aktualnej konfiguracji\ni wy≈õwietli SVG Assignment do interaktywnej analizy.",
                              font=('Arial', 9), foreground="blue")
        info_label.pack(anchor=tk.W, pady=(0, 10))
        
        # Przycisk konwersji i przerwania
        buttons_frame = ttk.Frame(conv_section)
        buttons_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.convert_button = ttk.Button(buttons_frame, text="üîÑ Konwertuj i Analizuj", 
                                       command=self.convert_and_analyze)
        self.convert_button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        
        self.cancel_button = ttk.Button(buttons_frame, text="‚èπÔ∏è Przerwij", 
                                      command=self.cancel_conversion, state='disabled')
        self.cancel_button.pack(side=tk.RIGHT)
        
        # Progress bar
        self.progress = ttk.Progressbar(conv_section, mode='indeterminate')
        self.progress.pack(fill=tk.X, pady=(0, 10))
        
        # Status konwersji
        self.conversion_status_var = tk.StringVar(value="Gotowy do konwersji")
        status_label = ttk.Label(conv_section, textvariable=self.conversion_status_var, 
                                font=('Arial', 9))
        status_label.pack(anchor=tk.W)
        
        # Za≈Çaduj informacje o aktualnej konfiguracji
        self.update_config_info()
    
    def refresh_config_list(self):
        """Od≈õwie≈º listƒô dostƒôpnych konfiguracji"""
        configs = self.config_manager.get_available_configs()
        self.config_combo['values'] = configs
    
    def on_config_change(self, event=None):
        """Obs≈Çu≈º zmianƒô konfiguracji"""
        config_name = self.current_config_var.get()
        if config_name and self.config_manager.load_config(config_name):
            self.config_manager.apply_to_config_module()
            self.update_config_info()
            self.log_success(f"Za≈Çadowano konfiguracjƒô: {config_name}")
            
            # Aktualizuj ≈õcie≈ºki plik√≥w
            default_dxf = self.config_manager.get('DEFAULT_DXF_FILE', 'input.dxf')
            if os.path.exists(default_dxf):
                self.current_dxf_path.set(os.path.abspath(default_dxf))
                self.log_success(f"üìÇ Plik DXF z konfiguracji: {default_dxf}")
            else:
                self.log_warning(f"‚ö†Ô∏è Plik DXF z konfiguracji nie istnieje: {default_dxf}")
            
            structured_svg = self.config_manager.get('STRUCTURED_SVG_OUTPUT', 'output_structured.svg')
            self.current_svg_path.set(structured_svg)
        else:
            self.log_error(f"Nie mo≈ºna za≈Çadowaƒá konfiguracji: {config_name}")
    
    def update_config_info(self):
        """Aktualizuj wy≈õwietlane informacje o konfiguracji"""
        try:
            # Lewa kolumna
            station_id = self.config_manager.get('STATION_ID', 'N/A')
            text_format = self.config_manager.get('CURRENT_TEXT_FORMAT', 'N/A')
            layer_line = self.config_manager.get('LAYER_LINE', 'N/A')
            layer_text = self.config_manager.get('LAYER_TEXT', 'N/A')
            
            self.config_station_label.config(text=f"üè≠ Station ID: {station_id}")
            
            format_desc = ""
            if text_format in self.config_manager.get_text_formats():
                format_desc = self.config_manager.get_text_formats()[text_format]['description']
            self.config_format_label.config(text=f"üìù Format: {text_format}")
            
            self.config_layers_label.config(text=f"üìã Warstwy: {layer_line[:15]}... / {layer_text[:15]}...")
            
            # Prawa kolumna
            dxf_file = self.config_manager.get('DEFAULT_DXF_FILE', 'N/A')
            svg_file = self.config_manager.get('STRUCTURED_SVG_OUTPUT', 'N/A')
            search_radius = self.config_manager.get('SEARCH_RADIUS', 'N/A')
            svg_size = f"{self.config_manager.get('SVG_WIDTH', 'N/A')}x{self.config_manager.get('SVG_HEIGHT', 'N/A')}"
            
            self.config_dxf_label.config(text=f"üìÑ DXF: {dxf_file}")
            self.config_svg_label.config(text=f"üé® SVG: {svg_file}")
            self.config_search_label.config(text=f"üîç Promie≈Ñ: {search_radius}, Rozmiar: {svg_size}")
            
        except Exception as e:
            self.log_error(f"B≈ÇƒÖd aktualizacji informacji o konfiguracji: {e}")
    
    def get_dxf_config_params(self):
        """Przygotuj parametry konfiguracji dla process_dxf"""
        return {
            'LAYER_TEXT': self.config_manager.get('LAYER_TEXT', '@IDE_KABLE_DC_TXT_B'),
            'LAYER_LINE': self.config_manager.get('LAYER_LINE', '@IDE_KABLE_DC_B'),
            'STATION_ID': self.config_manager.get('STATION_ID', 'ZIEB'),
            'Y_TOLERANCE': float(self.config_manager.get('Y_TOLERANCE', 0.01)),
            'SEGMENT_MIN_WIDTH': float(self.config_manager.get('SEGMENT_MIN_WIDTH', 0)),
            'SEARCH_RADIUS': float(self.config_manager.get('SEARCH_RADIUS', 6.0)),
            'TEXT_LOCATION': self.config_manager.get('TEXT_LOCATION', 'above')
        }

    def convert_and_analyze(self):
        """Nowa metoda konwersji z analizƒÖ wed≈Çug konfiguracji"""
        if self.processing:
            return
            
        try:
            # Pobierz plik DXF z konfiguracji
            dxf_file = self.config_manager.get('DEFAULT_DXF_FILE', 'input.dxf')
            if not os.path.exists(dxf_file):
                self.log_error(f"Plik DXF nie istnieje: {dxf_file}")
                messagebox.showerror("B≈ÇƒÖd", f"Plik DXF nie istnieje: {dxf_file}")
                return
                
            self.current_dxf_path.set(os.path.abspath(dxf_file))
            self.log_success(f"üìÇ Rozpoczynam konwersjƒô pliku DXF: {dxf_file}")
            
            # Rozpocznij konwersjƒô
            self.processing = True
            self.conversion_cancelled = False  # Flaga anulowania
            self.convert_button.config(state='disabled', text="Konwertowanie...")
            self.cancel_button.config(state='normal')
            self.conversion_status_var.set(f"üîÑ Analizowanie pliku: {os.path.basename(dxf_file)}...")
            self.progress.start()
            
            # Uruchom konwersjƒô w osobnym wƒÖtku
            def conversion_thread():
                try:
                    # Import tutaj, ≈ºeby uniknƒÖƒá cyklicznych import√≥w
                    from src.core.dxf2svg import process_dxf
                    
                    # Sprawd≈∫ czy proces zosta≈Ç anulowany
                    if self.conversion_cancelled:
                        self.root.after(0, self.on_conversion_cancelled)
                        return
                    
                    # Przygotuj parametry konfiguracji
                    config_params = self.get_dxf_config_params()
                    
                    # Konwertuj DXF - u≈ºywaj bezpo≈õrednio podanego pliku z parametrami konfiguracji
                    self.root.after(0, lambda: self.log_message(f"üîÑ Przetwarzanie pliku: {dxf_file}"))
                    assigned_data, station_texts, unassigned_texts, unassigned_segments, unassigned_polylines = process_dxf(dxf_file, config_params)
                    
                    # Sprawd≈∫ ponownie czy anulowano
                    if self.conversion_cancelled:
                        self.root.after(0, self.on_conversion_cancelled)
                        return
                    
                    # Zachowaj dane dla trybu interaktywnego
                    conversion_data = {
                        'assigned_data': assigned_data,
                        'station_texts': station_texts,
                        'unassigned_texts': unassigned_texts,
                        'unassigned_segments': unassigned_segments,
                        'unassigned_polylines': unassigned_polylines
                    }
                    
                    # Zaktualizuj GUI w g≈Ç√≥wnym wƒÖtku
                    self.root.after(0, self.on_conversion_complete, conversion_data)
                    
                except Exception as e:
                    if not self.conversion_cancelled:
                        self.root.after(0, self.on_conversion_error, str(e))
            
            # Uruchom wƒÖtek konwersji
            self.conversion_thread = threading.Thread(target=conversion_thread, daemon=True)
            self.conversion_thread.start()
            
        except Exception as e:
            self.log_error(f"B≈ÇƒÖd rozpoczƒôcia konwersji: {e}")
            self.processing = False
            self.convert_button.config(state='normal', text="üîÑ Konwertuj i Analizuj")
            self.cancel_button.config(state='disabled')
            self.progress.stop()
    
    def cancel_conversion(self):
        """Anuluj trwajƒÖcƒÖ konwersjƒô"""
        if self.processing:
            self.conversion_cancelled = True
            self.log_warning("‚ö†Ô∏è Anulowanie konwersji...")
            self.conversion_status_var.set("‚ö†Ô∏è Anulowanie...")
    
    def on_conversion_cancelled(self):
        """Obs≈Çu≈º anulowanƒÖ konwersjƒô"""
        self.processing = False
        self.convert_button.config(state='normal', text="üîÑ Konwertuj i Analizuj")
        self.cancel_button.config(state='disabled')
        self.progress.stop()
        self.conversion_status_var.set("‚ö†Ô∏è Konwersja anulowana")
        self.log_warning("Konwersja zosta≈Ça anulowana przez u≈ºytkownika")
    
    def on_conversion_complete(self, conversion_data):
        """Obs≈Çu≈º zako≈Ñczenie konwersji"""
        self.processing = False
        self.convert_button.config(state='normal', text="üîÑ Konwertuj i Analizuj")
        self.cancel_button.config(state='disabled')
        self.progress.stop()
        
        if conversion_data and not self.conversion_cancelled:
            # Zapisz dane konwersji
            self.last_conversion_data = conversion_data
            
            dxf_file = self.config_manager.get('DEFAULT_DXF_FILE', 'input.dxf')
            self.conversion_status_var.set(f"‚úÖ Konwersja zako≈Ñczona - {os.path.basename(dxf_file)}")
            self.log_success(f"‚úÖ Konwersja pliku {dxf_file} zako≈Ñczona pomy≈õlnie")
            
            # Aktualizuj informacje o trybie interaktywnym
            self.update_interactive_info()
            
            # Automatycznie wygeneruj interaktywny SVG po konwersji
            self.log_message("üîÑ Automatyczne generowanie interaktywnego SVG...")
            self._auto_generate_interactive_svg()
            
            # Prze≈ÇƒÖcz na tryb interactive assignment
            self.current_display_mode.set("interactive")
            self.change_display_mode()
            
            # Prze≈ÇƒÖcz na zak≈Çadkƒô Widok SVG
            self.notebook.select(1)  # Indeks zak≈Çadki Widok SVG
            
        else:
            self.conversion_status_var.set("‚ùå B≈ÇƒÖd konwersji")
            self.log_error("Konwersja DXF nie powiod≈Ça siƒô")
    
    def on_conversion_error(self, error_msg):
        """Obs≈Çu≈º b≈ÇƒÖd konwersji"""
        self.processing = False
        self.convert_button.config(state='normal', text="üîÑ Konwertuj i Analizuj")
        self.cancel_button.config(state='disabled')
        self.progress.stop()
        self.conversion_status_var.set("‚ùå B≈ÇƒÖd konwersji")
        dxf_file = self.config_manager.get('DEFAULT_DXF_FILE', 'input.dxf')
        self.log_error(f"‚ùå B≈ÇƒÖd konwersji pliku {dxf_file}: {error_msg}")
        messagebox.showerror("B≈ÇƒÖd konwersji", f"WystƒÖpi≈Ç b≈ÇƒÖd podczas konwersji pliku {os.path.basename(dxf_file)}:\n{error_msg}")
    
    def create_view_tab(self):
        """Zak≈Çadka: Widok SVG - tylko strukturalny i assignment"""
        view_frame = ttk.Frame(self.notebook)
        self.notebook.add(view_frame, text="üñºÔ∏è Widok SVG")
        
        # Sekcja wyboru widoku SVG
        view_section = ttk.LabelFrame(view_frame, text="Tryb Wy≈õwietlania", padding=10)
        view_section.pack(fill=tk.X, pady=(5, 10))
        
        # Radio buttons dla wyboru widoku (tylko 2 opcje)
        modes = [
            ("structured", "üìä Strukturalny (z grupami I01-I04)"),
            ("interactive", "üîß Assignment (edytor przypisa≈Ñ)")
        ]
        
        for mode, description in modes:
            ttk.Radiobutton(view_section, text=description, 
                           variable=self.current_display_mode, value=mode,
                           command=self.change_display_mode).pack(anchor=tk.W, pady=2)
        
        # Informacja o aktualnym pliku
        self.current_file_info = tk.StringVar(value="Plik: brak")
        info_label = ttk.Label(view_section, textvariable=self.current_file_info, 
                              style='Info.TLabel', font=('Arial', 9))
        info_label.pack(anchor=tk.W, pady=(5, 0))
        
        # Sekcja kontroli podglƒÖdu
        preview_section = ttk.LabelFrame(view_frame, text="Kontrola PodglƒÖdu", padding=10)
        preview_section.pack(fill=tk.X, pady=(0, 10))
        
        # Przyciski kontroli widoku
        view_buttons_frame = ttk.Frame(preview_section)
        view_buttons_frame.pack(fill=tk.X)
        
        ttk.Button(view_buttons_frame, text="üîÑ Od≈õwie≈º", command=self.refresh_svg).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(view_buttons_frame, text="üè† Reset", command=self.reset_view).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(view_buttons_frame, text="üîç Dopasuj", command=self.fit_to_window).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(view_buttons_frame, text="‚ö° Pe≈Çny render", command=self.force_full_render).pack(side=tk.LEFT)
        
        # Kontrola zoomu
        zoom_frame = ttk.Frame(preview_section)
        zoom_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Label(zoom_frame, text="Zoom:").pack(side=tk.LEFT)
        
        self.zoom_var = tk.StringVar(value="100%")
        zoom_label = ttk.Label(zoom_frame, textvariable=self.zoom_var)
        zoom_label.pack(side=tk.RIGHT)
        
        # Informacje o pliku SVG
        info_section = ttk.LabelFrame(view_frame, text="Informacje o Pliku", padding=10)
        info_section.pack(fill=tk.X, pady=(0, 10))
        
        self.svg_info = tk.StringVar(value="Brak pliku SVG")
        info_label = ttk.Label(info_section, textvariable=self.svg_info, style='Info.TLabel')
        info_label.pack(anchor=tk.W)
    
    def create_interactive_tab(self):
        """Zak≈Çadka: Tryb Interaktywny"""
        interactive_frame = ttk.Frame(self.notebook)
        self.notebook.add(interactive_frame, text="Tryb Interaktywny")
        
        # Sekcja uruchamiania
        launch_section = ttk.LabelFrame(interactive_frame, text="Uruchomienie", padding=10)
        launch_section.pack(fill=tk.X, pady=(5, 10), padx=10)
        
        # Przycisk uruchomienia trybu interaktywnego
        self.interactive_button = ttk.Button(launch_section, 
                                           text="üîß Uruchom Edytor Przypisa≈Ñ", 
                                           command=self.start_interactive_mode,
                                           state='disabled')
        self.interactive_button.pack(fill=tk.X, pady=(0, 5))
        
        # Informacje o stanie
        self.interactive_info = tk.StringVar(value="Brak danych do edycji")
        info_label = ttk.Label(launch_section, textvariable=self.interactive_info,
                              style='Info.TLabel', font=('Arial', 9), wraplength=300)
        info_label.pack(anchor=tk.W)
        
        # Status nieprzypisanych tekst√≥w
        self.unassigned_status = tk.StringVar(value="")
        status_label = ttk.Label(launch_section, textvariable=self.unassigned_status,
                               style='Error.TLabel', font=('Arial', 9))
        status_label.pack(anchor=tk.W, pady=(5, 0))

        # Sekcja przypisywania (ukryta domy≈õlnie) - bez scrollowania, od g√≥ry
        self.assignment_section = ttk.LabelFrame(interactive_frame, text="Przypisywanie", padding=10)
        self.assignment_section.pack(fill=tk.BOTH, expand=True, pady=(0, 10), padx=10)
        self.assignment_section.pack_forget()  # Ukryj na poczƒÖtku
        
        # Lista wszystkich tekst√≥w (nieprzypisane na czerwono)
        self.texts_label = tk.StringVar(value="Wszystkie teksty (üü¢ przypisane, üî¥ nieprzypisane):")
        ttk.Label(self.assignment_section, textvariable=self.texts_label).pack(anchor=tk.W)
        
        # Frame dla listy tekst√≥w i przycisku wyboru
        texts_frame = ttk.Frame(self.assignment_section)
        texts_frame.pack(fill=tk.X, pady=2)
        
        self.texts_listbox = tk.Listbox(texts_frame, height=5, selectmode=tk.SINGLE)
        self.texts_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.texts_listbox.bind('<<ListboxSelect>>', self.on_text_select)
        self.texts_listbox.bind('<Double-Button-1>', self.on_text_double_click)  # Podw√≥jne klikniƒôcie
        
        # Przycisk wyboru tekstu
        select_text_btn = ttk.Button(texts_frame, text="Wybierz\nTekst", 
                                   command=self.select_text, width=8)
        select_text_btn.pack(side=tk.RIGHT, padx=(5, 0))
        
        # Lista wszystkich segment√≥w (nieprzypisane na czerwono)
        self.segments_label = tk.StringVar(value="Wszystkie segmenty (üü¢ przypisane, üî¥ nieprzypisane):")
        ttk.Label(self.assignment_section, textvariable=self.segments_label).pack(anchor=tk.W, pady=(10,0))
        
        # Frame dla listy segment√≥w i przycisku wyboru
        segments_frame = ttk.Frame(self.assignment_section)
        segments_frame.pack(fill=tk.X, pady=2)
        
        self.segments_listbox = tk.Listbox(segments_frame, height=5, selectmode=tk.SINGLE)
        self.segments_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.segments_listbox.bind('<<ListboxSelect>>', self.on_segment_select)
        self.segments_listbox.bind('<Double-Button-1>', self.on_segment_double_click)  # Podw√≥jne klikniƒôcie
        
        # Przycisk wyboru segmentu
        select_segment_btn = ttk.Button(segments_frame, text="Wybierz\nSegment", 
                                      command=self.select_segment, width=8)
        select_segment_btn.pack(side=tk.RIGHT, padx=(5, 0))
        
        # Separator
        ttk.Separator(self.assignment_section, orient=tk.HORIZONTAL).pack(fill=tk.X, pady=10)
        
        # Sekcja zapamiƒôtanych wybor√≥w
        selection_frame = ttk.LabelFrame(self.assignment_section, text="Zapamiƒôtane wybory", padding=5)
        selection_frame.pack(fill=tk.X, pady=(0, 10))
        
        # G≈Ç√≥wny kontener dla kolumn
        columns_frame = ttk.Frame(selection_frame)
        columns_frame.pack(fill=tk.X)
        
        # Lewa kolumna - Teksty
        text_column = ttk.Frame(columns_frame)
        text_column.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        ttk.Label(text_column, text="üìù Wybrany tekst:", font=('Arial', 9, 'bold')).pack(anchor=tk.W)
        self.stored_text_info = tk.StringVar(value="‚ùå Brak wybranego tekstu")
        ttk.Label(text_column, textvariable=self.stored_text_info,
                 font=('Arial', 8), wraplength=150).pack(anchor=tk.W, pady=(2, 5))
        
        ttk.Button(text_column, text="Wyczy≈õƒá tekst", 
                  command=self.clear_selected_text, width=15).pack(anchor=tk.W)
        
        # Prawa kolumna - Segmenty  
        segment_column = ttk.Frame(columns_frame)
        segment_column.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(5, 0))
        
        ttk.Label(segment_column, text="üîó Wybrany segment:", font=('Arial', 9, 'bold')).pack(anchor=tk.W)
        self.stored_segment_info = tk.StringVar(value="‚ùå Brak wybranego segmentu")
        ttk.Label(segment_column, textvariable=self.stored_segment_info,
                 font=('Arial', 8), wraplength=150).pack(anchor=tk.W, pady=(2, 5))
        
        ttk.Button(segment_column, text="Wyczy≈õƒá segment", 
                  command=self.clear_selected_segment, width=15).pack(anchor=tk.W)
        
        # Sekcja akcji - podzielona na rzƒôdy
        actions_section = ttk.LabelFrame(self.assignment_section, text="Akcje", padding=5)
        actions_section.pack(fill=tk.X, pady=5)
        
        # Pierwszy rzƒÖd - podstawowe akcje
        action_frame1 = ttk.Frame(actions_section)
        action_frame1.pack(fill=tk.X, pady=(0, 5))
        
        ttk.Button(action_frame1, text="Przypisz", 
                  command=self.assign_text_to_segment).pack(side=tk.LEFT, padx=(0,5))
        ttk.Button(action_frame1, text="Pomi≈Ñ tekst", 
                  command=self.skip_text).pack(side=tk.LEFT, padx=(0,5))
        ttk.Button(action_frame1, text="üóëÔ∏è Usu≈Ñ", 
                  command=self.remove_text_segment_assignment).pack(side=tk.LEFT, padx=(0,5))
        ttk.Button(action_frame1, text="ÔøΩ Od≈õwie≈º SVG", 
                  command=self.regenerate_and_refresh_svg).pack(side=tk.LEFT, padx=(0,5))
        ttk.Button(action_frame1, text="Zapisz zmiany", 
                  command=self.save_assignments).pack(side=tk.RIGHT)
        
        # Drugi rzƒÖd - narzƒôdzia i generowanie
        action_frame2 = ttk.Frame(actions_section)
        action_frame2.pack(fill=tk.X, pady=(0, 5))
        
        ttk.Button(action_frame2, text="Mapa numer√≥w", 
                  command=self.show_segment_numbers_map).pack(side=tk.LEFT, padx=(0,5))
        ttk.Button(action_frame2, text="üìÅ Structured SVG", 
                  command=self.generate_final_structured_svg, style='Success.TButton').pack(side=tk.LEFT, padx=(0,5))
        ttk.Button(action_frame2, text="üìä Statystyki", 
                  command=self.show_assignment_statistics).pack(side=tk.LEFT, padx=(0,5))
        
        # Opcja auto-od≈õwie≈ºania w tym samym rzƒôdzie
        ttk.Checkbutton(action_frame2, text="üîÑ Auto-od≈õwie≈ºanie", 
                       variable=self.auto_refresh_svg, 
                       command=self.on_auto_refresh_change).pack(side=tk.RIGHT)
        
        # Trzeci rzƒÖd - zarzƒÖdzanie danymi  
        action_frame3 = ttk.Frame(actions_section)
        action_frame3.pack(fill=tk.X)
        
        ttk.Button(action_frame3, text="‚ü≤ Za≈Çaduj od nowa", 
                  command=self.reload_data_fresh).pack(side=tk.LEFT, padx=(0,5))
    
    def create_config_tab(self):
        """Tworzy zak≈Çadkƒô konfiguracji za pomocƒÖ ConfigTab"""
        config_tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(config_tab_frame, text="‚öôÔ∏è Konfiguracja")
        
        # Utw√≥rz instancjƒô ConfigTab
        self.config_tab = ConfigTab(config_tab_frame, self.config_manager)

    def create_status_tab(self):
        """Zak≈Çadka: Status i Logi"""
        status_frame = ttk.Frame(self.notebook)
        self.notebook.add(status_frame, text="Status i Logi")
        
        # Status
        status_section = ttk.LabelFrame(status_frame, text="Status", padding=10)
        status_section.pack(fill=tk.X, pady=(5, 10))
        
        self.status_var = tk.StringVar(value="Gotowy")
        status_label = ttk.Label(status_section, textvariable=self.status_var)
        status_label.pack(anchor=tk.W)
        
        # Logi
        log_section = ttk.LabelFrame(status_frame, text="Logi", padding=10)
        log_section.pack(fill=tk.BOTH, expand=True, pady=(0, 5))
        
        self.log_text = scrolledtext.ScrolledText(log_section, height=20, wrap=tk.WORD)
        self.log_text.pack(fill=tk.BOTH, expand=True)
    
    def create_svg_panel(self, parent):
        """Panel podglƒÖdu SVG po prawej stronie"""
        svg_frame = ttk.LabelFrame(parent, text="PodglƒÖd SVG", padding=5)
        svg_frame.pack(fill=tk.BOTH, expand=True)
        
        # Viewer SVG
        self.svg_viewer = SimpleSVGViewer(svg_frame)
    
    # Metody obs≈Çugi plik√≥w
    def select_dxf_file(self):
        """Wyb√≥r pliku DXF"""
        file_path = filedialog.askopenfilename(
            title="Wybierz plik DXF",
            filetypes=[("Pliki DXF", "*.dxf"), ("Wszystkie pliki", "*.*")],
            initialdir=os.getcwd()
        )
        
        if file_path:
            self.current_dxf_path.set(file_path)
            self.log_message(f"Wybrano plik DXF: {os.path.basename(file_path)}")
    
    def save_svg_as(self):
        """Zapisz SVG jako"""
        file_path = filedialog.asksaveasfilename(
            title="Zapisz SVG jako",
            defaultextension=".svg",
            filetypes=[("Pliki SVG", "*.svg"), ("Wszystkie pliki", "*.*")],
            initialdir=os.getcwd()
        )
        
        if file_path:
            self.current_svg_path.set(file_path)
            self.log_message(f"Ustawiono ≈õcie≈ºkƒô wyj≈õciowƒÖ: {os.path.basename(file_path)}")
    
    # Metody konwersji
    def convert_file(self):
        """Konwersja pliku DXF do SVG"""
        if self.processing:
            return
        
        dxf_path = self.current_dxf_path.get()
        if not dxf_path or not os.path.exists(dxf_path):
            messagebox.showerror("B≈ÇƒÖd", "Wybierz prawid≈Çowy plik DXF")
            return
        
        # Uruchom konwersjƒô w osobnym wƒÖtku
        self.processing = True
        self.convert_button.configure(state='disabled')
        self.progress.start()
        self.status_var.set("Konwersja w toku...")
        
        thread = threading.Thread(target=self._convert_worker, args=(dxf_path,))
        thread.daemon = True
        thread.start()
    
    def _convert_worker(self, dxf_path):
        """Worker do konwersji w osobnym wƒÖtku"""
        try:
            self.log_message("Rozpoczƒôcie konwersji...")
            
            # Kopiuj plik DXF do katalogu roboczego je≈õli potrzeba
            if os.path.basename(dxf_path) != "input.dxf":
                import shutil
                shutil.copy2(dxf_path, "input.dxf")
                self.log_message("Skopiowano plik DXF do katalogu roboczego")
            
            # Wykonaj konwersjƒô z parametrami konfiguracji i zachowaj dane
            config_params = self.get_dxf_config_params()
            assigned_data, station_texts, unassigned_texts, unassigned_segments, unassigned_polylines = process_dxf("input.dxf", config_params)
            
            # Zachowaj dane dla trybu interaktywnego
            self.last_conversion_data = {
                'assigned_data': assigned_data,
                'station_texts': station_texts,
                'unassigned_texts': unassigned_texts,
                'unassigned_segments': unassigned_segments,
                'unassigned_polylines': unassigned_polylines
            }
            
            # Powr√≥t do g≈Ç√≥wnego wƒÖtku
            self.root.after(0, self._conversion_complete, True, "Konwersja zako≈Ñczona pomy≈õlnie")
            
        except Exception as e:
            error_msg = f"B≈ÇƒÖd konwersji: {str(e)}"
            self.root.after(0, self._conversion_complete, False, error_msg)
    
    def _conversion_complete(self, success, message):
        """Zako≈Ñczenie konwersji"""
        self.processing = False
        self.convert_button.configure(state='normal')
        self.progress.stop()
        
        if success:
            self.status_var.set("Gotowy")
            self.log_message(message)
            
            # Aktualizuj informacje o trybie interaktywnym
            self.update_interactive_info()
            
            # Automatycznie wygeneruj interaktywny SVG po konwersji
            self.log_message("üîÑ Automatyczne generowanie interaktywnego SVG...")
            self._auto_generate_interactive_svg()
            
            # Auto-od≈õwie≈ºanie podglƒÖdu
            if self.auto_refresh.get():
                self.refresh_svg()
        else:
            self.status_var.set("B≈ÇƒÖd")
            self.log_message(message, "ERROR")
            messagebox.showerror("B≈ÇƒÖd konwersji", message)
    
    def _auto_generate_interactive_svg(self):
        """Automatyczne generowanie interaktywnego SVG po konwersji"""
        if not self.last_conversion_data:
            return
        
        try:
            from src.svg.svg_generator import generate_interactive_svg
            
            # Pobierz dane z konwersji
            assigned_data = self.last_conversion_data.get('assigned_data', {})
            station_texts = self.last_conversion_data.get('station_texts', [])
            unassigned_texts = self.last_conversion_data.get('unassigned_texts', [])
            unassigned_segments = self.last_conversion_data.get('unassigned_segments', [])
            
            # Pobierz konfiguracjƒô dla station_id
            config_params = self.get_dxf_config_params()
            station_id = config_params.get('station_id')
            
            # Wygeneruj SVG
            generate_interactive_svg(
                assigned_data,      # przypisane dane
                station_texts,      # wszystkie teksty stacji
                unassigned_texts,   # nieprzypisane teksty
                unassigned_segments, # nieprzypisane segmenty
                "interactive_assignment.svg",  # plik wyj≈õciowy
                station_id          # ID stacji
            )
            
            self.log_message("‚úÖ Automatycznie wygenerowano interaktywny SVG")
            
            # Je≈õli jeste≈õmy w trybie interactive, od≈õwie≈º podglƒÖd
            if self.current_display_mode.get() == "interactive":
                self.refresh_svg()
                
        except Exception as e:
            self.log_message(f"‚ùå B≈ÇƒÖd automatycznego generowania SVG: {e}", "ERROR")
    
    # Metody widoku SVG
    def change_display_mode(self):
        """Zmiana trybu wy≈õwietlania SVG (tylko structured i interactive)"""
        mode = self.current_display_mode.get()
        
        # Mapowanie tryb√≥w na pliki (tylko 2 opcje)
        file_mapping = {
            'structured': self.config_manager.get('STRUCTURED_SVG_OUTPUT', 'output_structured.svg'),
            'interactive': 'interactive_assignment.svg'
        }
        
        new_svg_path = file_mapping.get(mode, 'output_structured.svg')
        self.current_svg_path.set(new_svg_path)
        
        # Aktualizuj informacjƒô o pliku
        if os.path.exists(new_svg_path):
            file_size = os.path.getsize(new_svg_path) / 1024
            self.current_file_info.set(f"Plik: {new_svg_path} ({file_size:.1f}KB)")
        else:
            self.current_file_info.set(f"Plik: {new_svg_path} (brak)")
        
        # Od≈õwie≈º podglƒÖd
        self.refresh_svg()
        self.log_message(f"Prze≈ÇƒÖczono na tryb: {mode}")
    
    def refresh_svg(self):
        """Od≈õwie≈ºenie podglƒÖdu SVG"""
        svg_path = self.current_svg_path.get()
        
        if os.path.exists(svg_path):
            self.svg_viewer.load_svg(svg_path)
            self.update_svg_info(svg_path)
            self.update_zoom_display()
            self.log_message(f"Od≈õwie≈ºono podglƒÖd: {os.path.basename(svg_path)}")
        else:
            self.svg_info.set("Brak pliku SVG")
            self.log_message(f"Nie znaleziono pliku SVG: {svg_path}", "WARNING")
    
    def reset_view(self):
        """Reset widoku SVG"""
        self.svg_viewer.reset_view()
        self.update_zoom_display()
        self.log_message("Reset widoku")
    
    def fit_to_window(self):
        """Dopasowanie SVG do okna"""
        self.svg_viewer.fit_to_window()
        self.update_zoom_display()
        self.log_message("Dopasowano do okna")
    
    def force_full_render(self):
        """Wymu≈õ pe≈Çne renderowanie SVG"""
        self.svg_viewer.force_full_render()
        self.update_zoom_display()
        self.log_message("Wymuszono pe≈Çne renderowanie")
    
    def update_zoom_display(self):
        """Aktualizacja wy≈õwietlania zoomu"""
        zoom_percent = int(self.svg_viewer.scale * 100)
        self.zoom_var.set(f"{zoom_percent}%")
    
    def update_svg_info(self, svg_path):
        """Aktualizacja informacji o pliku SVG"""
        try:
            # Rozmiar pliku
            file_size = os.path.getsize(svg_path)
            size_kb = file_size / 1024
            
            # Rozmiary SVG
            width, height = self.svg_viewer.original_size
            
            info = f"Rozmiar: {width}√ó{height}px, {size_kb:.1f}KB"
            self.svg_info.set(info)
            
        except Exception as e:
            self.svg_info.set(f"B≈ÇƒÖd odczytu: {str(e)}")
    
    # Metody trybu interaktywnego
    def update_interactive_info(self):
        """Aktualizacja informacji o trybie interaktywnym"""
        if self.last_conversion_data:
            unassigned_texts_count = len(self.last_conversion_data.get('unassigned_texts', []))
            unassigned_segments_count = len(self.last_conversion_data.get('unassigned_segments', []))
            
            # Przycisk zawsze dostƒôpny - mogƒÖ byƒá b≈Çƒôdne przypisania do poprawienia
            self.interactive_button.configure(state='normal')
            
            if unassigned_texts_count > 0 or unassigned_segments_count > 0:
                self.interactive_info.set(f"Edytor przypisa≈Ñ dostƒôpny")
                status_parts = []
                if unassigned_texts_count > 0:
                    status_parts.append(f"{unassigned_texts_count} nieprzypisanych tekst√≥w")
                if unassigned_segments_count > 0:
                    status_parts.append(f"{unassigned_segments_count} nieprzypisanych segment√≥w")
                self.unassigned_status.set(f"‚ö†Ô∏è {', '.join(status_parts)}")
            else:
                self.interactive_info.set("Edytor przypisa≈Ñ dostƒôpny")
                self.unassigned_status.set("‚úÖ Wszystko przypisane - mo≈ºna sprawdziƒá i poprawiƒá")
        else:
            self.interactive_button.configure(state='disabled')
            self.interactive_info.set("Brak danych do edycji")
            self.unassigned_status.set("")
    
    def start_interactive_mode(self):
        """Uruchomienie trybu interaktywnego z pe≈Çnymi listami wszystkich tekst√≥w i segment√≥w"""
        if not self.last_conversion_data:
            messagebox.showerror("B≈ÇƒÖd", "Brak danych do edycji. Wykonaj najpierw konwersjƒô DXF.")
            return
        
        try:
            # Pobierz dane z conversion
            assigned_data = self.last_conversion_data.get('assigned_data', {})
            station_texts = self.last_conversion_data.get('station_texts', [])
            unassigned_texts = self.last_conversion_data.get('unassigned_texts', [])
            unassigned_segments = self.last_conversion_data.get('unassigned_segments', [])
            unassigned_polylines = self.last_conversion_data.get('unassigned_polylines', [])
            
            # Utw√≥rz listƒô wszystkich tekst√≥w (przypisanych + nieprzypisanych)
            self.all_texts = station_texts.copy()  # To ju≈º zawiera wszystkie teksty stacji
            self.unassigned_texts = unassigned_texts.copy()
            
            # Aktualizuj listƒô nieprzypisanych tekst√≥w z poprawnym station_id
            station_id = self.config_manager.get('STATION_ID', 'ZIEB')
            self.unassigned_texts = get_unassigned_texts(self.all_texts, assigned_data, station_id)
            
            # Utw√≥rz listƒô wszystkich segment√≥w
            # Zbierz przypisane segmenty z assigned_data
            assigned_segments = []
            for inv_id, strings in assigned_data.items():
                for str_id, segments in strings.items():
                    if segments:  # Tylko stringi z segmentami
                        assigned_segments.extend(segments)
            
            # Po≈ÇƒÖcz przypisane i nieprzypisane segmenty
            self.all_segments = assigned_segments + unassigned_segments
            self.unassigned_segments = unassigned_segments.copy()
            
            # Aktualizuj listƒô nieprzypisanych segment√≥w
            self.unassigned_segments = get_unassigned_segments(self.all_segments, assigned_data)
            
            # Aktualizuj dane przypisa≈Ñ
            self.assigned_data = assigned_data
            
            # Inicjalizacja AssignmentManager z aktualnymi danymi
            self.assignment_manager = AssignmentManager()
            self.assignment_manager.initialize_from_data(
                assigned_data=assigned_data,
                all_texts=self.all_texts,
                all_segments=self.all_segments,
                unassigned_texts=unassigned_texts,
                unassigned_segments=unassigned_segments
            )
            self.log_message("‚úÖ AssignmentManager zainicjalizowany z aktualnƒÖ bazƒÖ danych")
            
            if not self.all_texts and not self.all_segments:
                messagebox.showinfo("Info", "Brak danych do wy≈õwietlenia!")
                return
            
            # Wype≈Çnij listy z kolorami
            self.populate_texts_list()
            self.populate_segments_list()
            
            # Poka≈º sekcjƒô przypisywania
            self.assignment_section.pack(fill=tk.BOTH, expand=True, pady=(0, 10), padx=10)
            
            # Prze≈ÇƒÖcz na zak≈Çadkƒô trybu interaktywnego
            self.notebook.select(2)  # Zak≈Çadka "Tryb Interaktywny"
            
            # Prze≈ÇƒÖcz widok na interactive
            self.current_display_mode.set("interactive")
            self.change_display_mode()
            
            # Logowanie informacji
            self.log_message(f"Tryb interaktywny uruchomiony:")
            self.log_message(f"  üìù Wszystkich tekst√≥w: {len(self.all_texts)} (nieprzypisanych: {len(self.unassigned_texts)})")
            self.log_message(f"  üìè Wszystkich segment√≥w: {len(self.all_segments)} (nieprzypisanych: {len(self.unassigned_segments)})")
            
            # Aktualizuj status
            self.interactive_info.set("‚úÖ Tryb interaktywny aktywny")
            self.unassigned_status.set(f"üî¥ {len(self.unassigned_texts)} nieprzypisanych tekst√≥w, {len(self.unassigned_segments)} nieprzypisanych segment√≥w")
            
        except Exception as e:
            self.log_message(f"B≈ÇƒÖd uruchamiania trybu interaktywnego: {e}", "ERROR")
            messagebox.showerror("B≈ÇƒÖd", f"Nie mo≈ºna uruchomiƒá trybu interaktywnego:\\n{e}")
    
    def populate_texts_list(self):
        """Wype≈Çnienie listy wszystkich tekst√≥w z zaznaczeniem nieprzypisanych na czerwono"""
        self.texts_listbox.delete(0, tk.END)
        
        # Posortuj wszystkie teksty alfabetycznie
        sorted_texts = sorted(self.all_texts, key=lambda x: x.get('id', ''))
        
        # Utw√≥rz set ID nieprzypisanych tekst√≥w dla szybkiego sprawdzania
        unassigned_ids = {text.get('id') for text in self.unassigned_texts}
        
        assigned_count = 0
        unassigned_count = 0
        
        for i, text in enumerate(sorted_texts):
            try:
                text_id = text.get('id', f'Text_{i}')
                pos = text.get('pos', [0, 0])
                display_text = f"{text_id} @ ({pos[0]:.1f}, {pos[1]:.1f})"
                
                self.texts_listbox.insert(tk.END, display_text)
                
                # Zaznacz nieprzypisane teksty na czerwono
                if text_id in unassigned_ids:
                    self.texts_listbox.itemconfig(i, {'fg': 'red'})
                    unassigned_count += 1
                else:
                    self.texts_listbox.itemconfig(i, {'fg': 'green'})  # Przypisane na zielono
                    assigned_count += 1
                    
            except Exception as e:
                self.log_message(f"B≈ÇƒÖd przetwarzania tekstu {i}: {e}", "ERROR")
        
        # Aktualizuj etykietƒô z liczbami
        self.texts_label.set(f"Wszystkie teksty ({assigned_count} üü¢ przypisanych, {unassigned_count} üî¥ nieprzypisanych):")
    
    def populate_segments_list(self):
        """Wype≈Çnienie listy wszystkich segment√≥w z numeracjƒÖ SVG jako g≈Ç√≥wnƒÖ"""
        self.segments_listbox.delete(0, tk.END)
        
        # Posortuj wszystkie segmenty wed≈Çug ID
        sorted_segments = sorted(self.all_segments, key=lambda x: x.get('id', 0))
        
        # Utw√≥rz set ID nieprzypisanych segment√≥w dla szybkiego sprawdzania
        unassigned_ids = {segment.get('id') for segment in self.unassigned_segments}
        
        assigned_count = 0
        unassigned_count = 0
        
        # Oblicz globalne numery SVG (jak w svg_generator.py)
        svg_number_map = {}
        svg_counter = 1
        
        # Najpierw przypisane segmenty (w kolejno≈õci jak w assigned_data)
        if hasattr(self, 'assigned_data') and self.assigned_data:
            for inverter_id, strings in self.assigned_data.items():
                for string_name, segments in strings.items():
                    if isinstance(segments, list):
                        for segment in segments:
                            seg_id = segment.get('id')
                            if seg_id is not None and seg_id not in svg_number_map:
                                svg_number_map[seg_id] = svg_counter
                                svg_counter += 1
        
        # Potem nieprzypisane segmenty
        for segment in self.unassigned_segments:
            seg_id = segment.get('id')
            if seg_id is not None and seg_id not in svg_number_map:
                svg_number_map[seg_id] = svg_counter
                svg_counter += 1
        
        # Pozosta≈Çe segmenty (na wszelki wypadek)
        for segment in sorted_segments:
            seg_id = segment.get('id')
            if seg_id is not None and seg_id not in svg_number_map:
                svg_number_map[seg_id] = svg_counter
                svg_counter += 1
        
        for i, segment in enumerate(sorted_segments):
            try:
                segment_id = segment.get('id', i)
                start = segment.get('start', [0, 0])
                end = segment.get('end', [0, 0])
                
                # Pobierz numer SVG z mapy - to bƒôdzie g≈Ç√≥wny numer
                svg_number = svg_number_map.get(segment_id, svg_counter)
                
                # Format: #SVG_numer (DXF:id) (start) ‚Üí (end)
                display_text = f"#{svg_number} (DXF:{segment_id}) ({start[0]:.1f},{start[1]:.1f}) ‚Üí ({end[0]:.1f},{end[1]:.1f})"
                
                self.segments_listbox.insert(tk.END, display_text)
                
                # Zaznacz nieprzypisane segmenty na czerwono
                if segment_id in unassigned_ids:
                    self.segments_listbox.itemconfig(i, {'fg': 'red'})
                    unassigned_count += 1
                else:
                    self.segments_listbox.itemconfig(i, {'fg': 'green'})  # Przypisane na zielono
                    assigned_count += 1
                    
            except Exception as e:
                self.log_message(f"B≈ÇƒÖd przetwarzania segmentu {i}: {e}", "ERROR")
        
        # Aktualizuj etykietƒô z liczbami
        self.segments_label.set(f"Wszystkie segmenty ({assigned_count} üü¢ przypisanych, {unassigned_count} üî¥ nieprzypisanych):")
    
    def on_text_select(self, event):
        """Obs≈Çuga wyboru tekstu z posortowanej listy wszystkich tekst√≥w"""
        selection = self.texts_listbox.curselection()
        if selection:
            idx = selection[0]
            self.selected_text_index = idx
            
            # Pobierz tekst z posortowanej listy wszystkich tekst√≥w
            sorted_texts = sorted(self.all_texts, key=lambda x: x.get('id', ''))
            if idx < len(sorted_texts):
                text_data = sorted_texts[idx]
                text_id = text_data.get('id', 'Unknown')
                
                # Sprawd≈∫ czy tekst jest nieprzypisany
                unassigned_ids = {text.get('id') for text in self.unassigned_texts}
                status = "üî¥ NIEPRZYPISANY" if text_id in unassigned_ids else "üü¢ PRZYPISANY"
                
                # Informacje o tek≈õcie sƒÖ teraz wy≈õwietlane tylko w zapamiƒôtanych wyborach
            else:
                pass  # B≈ÇƒÖd indeksu tekstu - nic nie robimy
        else:
            self.selected_text_index = None
    
    def on_segment_select(self, event):
        """Obs≈Çuga wyboru segmentu z posortowanej listy wszystkich segment√≥w"""
        selection = self.segments_listbox.curselection()
        if selection:
            idx = selection[0]
            self.selected_segment_index = idx
            
            # Pobierz segment z posortowanej listy wszystkich segment√≥w
            sorted_segments = sorted(self.all_segments, key=lambda x: x.get('id', 0))
            if idx < len(sorted_segments):
                segment_data = sorted_segments[idx]
                segment_id = segment_data.get('id', 'Unknown')
                
                # Sprawd≈∫ czy segment jest nieprzypisany
                unassigned_ids = {segment.get('id') for segment in self.unassigned_segments}
                status = "üî¥ NIEPRZYPISANY" if segment_id in unassigned_ids else "üü¢ PRZYPISANY"
                
                # Informacje o segmencie sƒÖ teraz wy≈õwietlane tylko w zapamiƒôtanych wyborach
            else:
                pass  # B≈ÇƒÖd indeksu segmentu - nic nie robimy
        else:
            self.selected_segment_index = None
    
    def select_text(self):
        """Zapamiƒôtaj wybrany tekst - UMO≈ªLIWIA WYB√ìR DOWOLNEGO TEKSTU"""
        if self.selected_text_index is None:
            messagebox.showwarning("Uwaga", "Najpierw kliknij na tekst w li≈õcie")
            return
        
        # Pobierz dane z posortowanej listy wszystkich tekst√≥w
        sorted_texts = sorted(self.all_texts, key=lambda x: x.get('id', ''))
        if self.selected_text_index >= len(sorted_texts):
            messagebox.showerror("B≈ÇƒÖd", "Nieprawid≈Çowy indeks tekstu")
            return
        
        selected_text = sorted_texts[self.selected_text_index]
        text_id = selected_text.get('id')
        
        # Sprawd≈∫ status tekstu (nieprzypisany / przypisany)
        unassigned_text_ids = {text.get('id') for text in self.unassigned_texts}
        is_unassigned = text_id in unassigned_text_ids
        
        # Zapamiƒôtaj wyb√≥r (bez blokowania przypisanych)
        self.stored_text = self.selected_text_index
        self.stored_text_data = selected_text
        
        # Aktualizuj display z w≈Ça≈õciwym statusem
        status = "üî¥ NIEPRZYPISANY" if is_unassigned else "üü¢ PRZYPISANY"
        pos = selected_text.get('pos', [0, 0])
        info_text = f"‚úÖ TEKST: {text_id}\nPozycja: ({pos[0]:.2f}, {pos[1]:.2f})\nStatus: {status}"
        
        if not is_unassigned:
            info_text += "\n‚ö†Ô∏è BƒòDZIE PRZEPISANY!"
        
        self.stored_text_info.set(info_text)
        
        self.log_message(f"Zapamiƒôtano tekst: {text_id} ({status})")
        
        # Sprawd≈∫ czy mo≈ºna ju≈º przypisaƒá
        self.check_assignment_ready()
    
    def on_text_double_click(self, event):
        """Obs≈Çuga podw√≥jnego klikniƒôcia na tek≈õcie - automatycznie wybierz"""
        self.select_text()
    
    def on_segment_double_click(self, event):
        """Obs≈Çuga podw√≥jnego klikniƒôcia na segmencie - automatycznie wybierz"""
        self.select_segment()
    
    def select_segment(self):
        """Zapamiƒôtaj wybrany segment - UMO≈ªLIWIA WYB√ìR DOWOLNEGO SEGMENTU"""
        if self.selected_segment_index is None:
            messagebox.showwarning("Uwaga", "Najpierw kliknij na segment w li≈õcie")
            return
        
        # Pobierz dane z posortowanej listy wszystkich segment√≥w
        sorted_segments = sorted(self.all_segments, key=lambda x: x.get('id', 0))
        if self.selected_segment_index >= len(sorted_segments):
            messagebox.showerror("B≈ÇƒÖd", "Nieprawid≈Çowy indeks segmentu")
            return
        
        selected_segment = sorted_segments[self.selected_segment_index]
        segment_id = selected_segment.get('id')
        
        # Sprawd≈∫ status segmentu (nieprzypisany / przypisany)
        unassigned_segment_ids = {segment.get('id') for segment in self.unassigned_segments}
        is_unassigned = segment_id in unassigned_segment_ids
        
        # Zapamiƒôtaj wyb√≥r (bez blokowania przypisanych)
        self.stored_segment = self.selected_segment_index
        self.stored_segment_data = selected_segment
        
        # Aktualizuj display z w≈Ça≈õciwym statusem
        status = "üî¥ NIEPRZYPISANY" if is_unassigned else "üü¢ PRZYPISANY"
        start = selected_segment.get('start', [0, 0])
        end = selected_segment.get('end', [0, 0])
        info_text = f"‚úÖ SEGMENT: #{segment_id}\nOd: ({start[0]:.1f}, {start[1]:.1f})\nDo: ({end[0]:.1f}, {end[1]:.1f})\nStatus: {status}"
        
        if not is_unassigned:
            info_text += "\n‚ö†Ô∏è BƒòDZIE PRZEPISANY!"
        
        self.stored_segment_info.set(info_text)
        
        self.log_message(f"Zapamiƒôtano segment: #{segment_id} ({status})")
        
        # Sprawd≈∫ czy mo≈ºna ju≈º przypisaƒá
        self.check_assignment_ready()
    
    def clear_selected_text(self):
        """Wyczy≈õƒá zapamiƒôtany tekst"""
        self.stored_text = None
        self.stored_text_data = None
        self.stored_text_info.set("‚ùå Brak wybranego tekstu")
        self.log_message("Wyczyszczono zapamiƒôtany tekst")
    
    def clear_selected_segment(self):
        """Wyczy≈õƒá zapamiƒôtany segment"""
        self.stored_segment = None
        self.stored_segment_data = None
        self.stored_segment_info.set("‚ùå Brak wybranego segmentu")
        self.log_message("Wyczyszczono zapamiƒôtany segment")
    
    def check_assignment_ready(self):
        """Sprawd≈∫ czy mo≈ºna wykonaƒá przypisanie i zaktualizuj przycisk"""
        if self.stored_text_data and self.stored_segment_data:
            # Znajd≈∫ przycisk Przypisz i pokoloruj go na zielono
            self.log_message("üéØ Gotowy do przypisania! Naci≈õnij przycisk 'Przypisz'")
            # Tu mo≈ºna dodaƒá kolorowanie przycisku je≈õli potrzeba
    
    def assign_text_to_segment(self):
        """Przypisanie tekstu do segmentu u≈ºywajƒÖc zapamiƒôtanych wybor√≥w - UMO≈ªLIWIA PRZEPISYWANIE"""
        if not self.stored_text_data or not self.stored_segment_data:
            messagebox.showwarning("Uwaga", "Najpierw wybierz tekst i segment u≈ºywajƒÖc przycisk√≥w 'Wybierz'")
            return
        
        if not self.assignment_manager:
            messagebox.showerror("B≈ÇƒÖd", "AssignmentManager nie jest zainicjalizowany!")
            return
        
        # Pobierz dane z zapamiƒôtanych wybor√≥w
        selected_text = self.stored_text_data
        selected_segment = self.stored_segment_data
        
        text_id = selected_text.get('id')
        segment_id = selected_segment.get('id')
        
        self.log_message(f"üéØ Rozpoczynam przypisanie: {text_id} ‚Üí Segment #{segment_id}")
        
        # Sprawd≈∫ statusy element√≥w w AssignmentManager
        text_was_unassigned = text_id in {t.get('id') for t in self.assignment_manager.unassigned_texts}
        segment_was_unassigned = segment_id in {s.get('id') for s in self.assignment_manager.unassigned_segments}
        
        self.log_message(f"üìä Status: Tekst {'üî¥' if text_was_unassigned else 'üü¢'}, Segment {'üî¥' if segment_was_unassigned else 'üü¢'}")
        
        # Potwierd≈∫ przepisanie je≈õli element by≈Ç ju≈º przypisany
        if not text_was_unassigned or not segment_was_unassigned:
            msg = f"UWAGA: Przepisujesz przypisania!\n\n"
            if not text_was_unassigned:
                msg += f"‚Ä¢ Tekst '{text_id}' by≈Ç ju≈º przypisany\n"
            if not segment_was_unassigned:
                msg += f"‚Ä¢ Segment #{segment_id} by≈Ç ju≈º przypisany\n"
            msg += f"\nCzy na pewno chcesz przepisaƒá?"
            
            if not messagebox.askyesno("Potwierdzenie przepisania", msg):
                return
        
        # Wykonaj przypisanie przez AssignmentManager
        try:
            result = self.assignment_manager.assign_text_to_segment(text_id, segment_id)
            if result['success']:
                # Aktualizuj lokalne dane GUI z AssignmentManager
                self.assigned_data = self.assignment_manager.current_assigned_data
                self.unassigned_texts = self.assignment_manager.unassigned_texts
                self.unassigned_segments = self.assignment_manager.unassigned_segments
                self.assignment_changes = self.assignment_manager.assignment_changes
                
                action_type = "Przepisano" if result['was_reassignment'] else "Przypisano"
                self.log_success(f"‚úÖ {action_type} {text_id} do segmentu #{segment_id}")
                
                # Loguj usuniƒôte przypisania
                for removed in result.get('removed_assignments', []):
                    self.log_message(f"üóëÔ∏è Usuniƒôto {removed}")
                
                # Od≈õwie≈º listy (poka≈ºe zmiany kolor√≥w)
                self.populate_texts_list()
                self.populate_segments_list()
                
                # Wyczy≈õƒá zapamiƒôtane wybory
                self.clear_selected_text()
                self.clear_selected_segment()
                
                # Wyczy≈õƒá zaznaczenia w listboxach
                self.texts_listbox.selection_clear(0, tk.END)
                self.segments_listbox.selection_clear(0, tk.END)
                
                # Zawsze od≈õwie≈º SVG po przypisaniu (dla natychmiastowego feedbacku)
                self.regenerate_and_refresh_svg()
                
                # Aktualizuj status
                self.unassigned_status.set(f"üî¥ {len(self.unassigned_texts)} nieprzypisanych tekst√≥w, {len(self.unassigned_segments)} nieprzypisanych segment√≥w")
                
            else:
                self.log_error(f"‚ùå {result['message']}")
                messagebox.showerror("B≈ÇƒÖd", f"Nie uda≈Ço siƒô wykonaƒá przypisania: {result['message']}")
                
        except Exception as e:
            self.log_error(f"‚ùå B≈ÇƒÖd przypisania: {e}")
            messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd podczas przypisania: {e}")
        self.selected_text_index = None
        self.selected_segment_index = None
        
        # OPCJONALNE OD≈öWIE≈ªENIE SVG - tylko je≈õli u≈ºytkownik chce
        if hasattr(self, 'auto_refresh_svg') and self.auto_refresh_svg.get():
            self.log_message("üîÑ Rozpoczynam regeneracjƒô SVG...")
            self.regenerate_and_refresh_svg()

    def remove_text_segment_assignment(self):
        """Usu≈Ñ konkretne przypisanie tekstu do segmentu"""
        if not self.assignment_manager:
            messagebox.showerror("B≈ÇƒÖd", "AssignmentManager nie jest zainicjalizowany!")
            return
        
        # Pobierz wybrane elementy
        text_id = self.get_selected_text_id()
        segment_id = self.get_selected_segment_id()
        
        if not text_id or not segment_id:
            messagebox.showwarning("Brak wyboru", "Wybierz tekst i segment do usuniƒôcia przypisania!")
            return
        
        # Potwierd≈∫ usuniƒôcie
        msg = f"Czy na pewno chcesz usunƒÖƒá przypisanie?\n\nTekst: {text_id}\nSegment: #{segment_id}"
        if not messagebox.askyesno("Potwierdzenie usuniƒôcia", msg):
            return
        
        # Wykonaj usuniƒôcie przez AssignmentManager
        try:
            result = self.assignment_manager.remove_assignment(text_id, segment_id)
            if result['success']:
                # Aktualizuj lokalne dane GUI z AssignmentManager
                self.assigned_data = self.assignment_manager.current_assigned_data
                self.unassigned_texts = self.assignment_manager.unassigned_texts
                self.unassigned_segments = self.assignment_manager.unassigned_segments
                
                self.log_message(f"‚úÖ {result['message']}")
                
                # Od≈õwie≈º listy
                self.refresh_texts_and_segments_lists()
                
                # Zawsze od≈õwie≈º SVG po usuniƒôciu (dla natychmiastowego feedbacku)
                self.regenerate_and_refresh_svg()
                
                # Aktualizuj status
                self.unassigned_status.set(f"üî¥ {len(self.unassigned_texts)} nieprzypisanych tekst√≥w, {len(self.unassigned_segments)} nieprzypisanych segment√≥w")
                
            else:
                self.log_error(f"‚ùå {result['message']}")
                messagebox.showerror("B≈ÇƒÖd", f"Nie uda≈Ço siƒô usunƒÖƒá przypisania: {result['message']}")
                
        except Exception as e:
            self.log_error(f"‚ùå B≈ÇƒÖd usuwania: {e}")
            messagebox.showerror("B≈ÇƒÖd", f"B≈ÇƒÖd podczas usuwania przypisania: {e}")
        
        self.selected_text_index = None
        self.selected_segment_index = None

    def skip_text(self, text_id=None):
            messagebox.showinfo("Gratulacje!", "Wszystkie teksty zosta≈Çy przypisane!")
            self.log_message("‚úÖ Wszystkie teksty przypisane!")
    
    def regenerate_and_refresh_svg(self):
        """Natychmiastowa regeneracja i od≈õwie≈ºenie SVG po zmianie przypisania"""
        try:
            if not self.assignment_changes['new_assignments']:
                self.log_message("Brak zmian do zastosowania w SVG")
                return
            
            self.log_message("üîÑ Regenerujƒô SVG z nowymi przypisaniami...")
            
            # Pobierz dane z ostatniej konwersji
            assigned_data = self.last_conversion_data.get('assigned_data', {}).copy()
            station_texts = self.last_conversion_data.get('station_texts', [])
            
            # Zastosuj wszystkie nowe przypisania
            for assignment in self.assignment_changes['new_assignments']:
                text_data = assignment['text']
                segment_data = assignment['segment']
                
                # Znajd≈∫ odpowiedni inverter (u≈ºywamy pierwszego dostƒôpnego)
                inverter_id = list(assigned_data.keys())[0] if assigned_data else "I01"
                if inverter_id not in assigned_data:
                    assigned_data[inverter_id] = {}
                
                # Dodaj segment do stringa tekstowego
                text_id = text_data['id']
                if text_id not in assigned_data[inverter_id]:
                    assigned_data[inverter_id][text_id] = []
                
                # Dodaj segment (unikaj duplikat√≥w)
                segment_ids = [s.get('id') for s in assigned_data[inverter_id][text_id]]
                if segment_data.get('id') not in segment_ids:
                    assigned_data[inverter_id][text_id].append(segment_data)
            
            # Regeneruj SVG z nowymi przypisaniami
            from src.svg.svg_generator import generate_interactive_svg
            
            # Pobierz aktualnie nieprzypisane elementy
            remaining_unassigned_texts = self.unassigned_texts.copy()
            remaining_unassigned_segments = self.unassigned_segments.copy()
            
            self.log_message(f"üîÑ Regenerujƒô SVG: {len(remaining_unassigned_texts)} tekst√≥w, {len(remaining_unassigned_segments)} segment√≥w")
            
            # Pobierz konfiguracjƒô dla station_id
            config_params = self.get_dxf_config_params()
            station_id = config_params.get('station_id')
            
            # Wygeneruj nowy SVG z poprawnymi parametrami
            generate_interactive_svg(
                assigned_data,           # inverter_data: Dict
                station_texts,          # texts: List (wszystkie teksty stacji)
                remaining_unassigned_texts,  # unassigned_texts: List
                remaining_unassigned_segments,  # unassigned_segments: List
                "interactive_assignment.svg",   # output_path: str
                station_id              # station_id: str
            )
            
            # Prze≈ÇƒÖcz widok na interactive i od≈õwie≈º
            self.current_display_mode.set("interactive")
            self.change_display_mode()
            
            # Aktualizuj listy po regeneracji
            self.populate_texts_list()
            self.populate_segments_list()
            
            self.log_message("‚úÖ SVG zaktualizowany z nowymi przypisaniami")
            
        except Exception as e:
            self.log_message(f"‚ùå B≈ÇƒÖd regeneracji SVG: {e}", "ERROR")
            # Nie przerywaj operacji - u≈ºyj standardowego od≈õwie≈ºania
            self.refresh_svg()

    def skip_text(self):
        """Pomi≈Ñ zapamiƒôtany tekst - UMO≈ªLIWIA POMIJANIE DOWOLNYCH TEKST√ìW"""
        if not self.stored_text_data:
            messagebox.showwarning("Uwaga", "Najpierw wybierz tekst u≈ºywajƒÖc przycisku 'Wybierz Tekst'")
            return
        
        selected_text = self.stored_text_data
        text_id = selected_text.get('id')
        
        # Sprawd≈∫ status tekstu
        unassigned_text_ids = {text.get('id') for text in self.unassigned_texts}
        was_unassigned = text_id in unassigned_text_ids
        
        # Potwierd≈∫ pomijanie je≈õli tekst by≈Ç ju≈º przypisany
        if not was_unassigned:
            if not messagebox.askyesno("Potwierdzenie", f"Tekst '{text_id}' by≈Ç ju≈º przypisany.\nCzy na pewno chcesz go pominƒÖƒá?"):
                return
        
        # Usu≈Ñ stare przypisania z assigned_data je≈õli istniejƒÖ
        if hasattr(self, 'assigned_data') and not was_unassigned:
            for inv_id in list(self.assigned_data.keys()):
                if text_id in self.assigned_data[inv_id]:
                    del self.assigned_data[inv_id][text_id]
                    self.log_message(f"Usuniƒôto przypisanie tekstu {text_id}")
        
        # Dodaj do pominiƒôtych
        self.assignment_changes['skipped_texts'].append(selected_text)
        
        # Usu≈Ñ z listy nieprzypisanych (je≈õli tam by≈Ç)
        if was_unassigned:
            self.unassigned_texts = [t for t in self.unassigned_texts if t.get('id') != text_id]
        
        action_type = "Usuniƒôto i pominiƒôto" if not was_unassigned else "Pominiƒôto"
        self.log_message(f"{action_type} tekst: {text_id}")
        
        # Od≈õwie≈º listy (poka≈ºe zmianƒô kolor√≥w)
        self.populate_texts_list()
        
        # Wyczy≈õƒá zapamiƒôtany tekst
        self.clear_selected_text()
        
        # Wyczy≈õƒá zaznaczenie w listbox
        self.selected_text_index = None
        
        # NATYCHMIASTOWE OD≈öWIE≈ªENIE SVG
        self.regenerate_and_refresh_svg()
    
    def show_segment_numbers_map(self):
        """Poka≈º mapƒô numer√≥w segment√≥w - SVG vs Lista"""
        try:
            if not hasattr(self, 'all_segments') or not self.all_segments:
                messagebox.showinfo("Info", "Brak danych o segmentach")
                return
            
            # Utw√≥rz okno z mapƒÖ
            map_window = tk.Toplevel(self.root)
            map_window.title("Mapa numer√≥w segment√≥w - SVG vs Lista")
            map_window.geometry("800x600")
            
            # Frame z scrollbarem
            main_frame = ttk.Frame(map_window)
            main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            # Scrolled text
            scroll_text = scrolledtext.ScrolledText(main_frame, wrap=tk.WORD, font=('Courier', 10))
            scroll_text.pack(fill=tk.BOTH, expand=True)
            
            # Przygotuj dane
            sorted_segments = sorted(self.all_segments, key=lambda x: x.get('id', 0))
            
            # Nag≈Ç√≥wek
            content = "MAPA NUMER√ìW SEGMENT√ìW\n"
            content += "=" * 80 + "\n\n"
            content += f"{'ID z DXF':<10} {'Nr na SVG':<10} {'Start':<20} {'End':<20} {'Status':<15}\n"
            content += "-" * 80 + "\n"
            
            # Sprawd≈∫ nieprzypisane segmenty
            unassigned_ids = {seg.get('id') for seg in self.unassigned_segments}
            
            # Globalna numeracja SVG (jak w svg_generator.py)
            svg_number = 1
            
            # Dane z assigned_data dla obliczenia globalnej numeracji
            if hasattr(self, 'assigned_data'):
                for inverter_id, strings in self.assigned_data.items():
                    for string_name, segments in strings.items():
                        for segment in segments:
                            seg_id = segment.get('id')
                            status = "üü¢ PRZYPISANY" if seg_id not in unassigned_ids else "üî¥ NIEPRZYPISANY"
                            start = segment.get('start', [0, 0])
                            end = segment.get('end', [0, 0])
                            
                            content += f"{seg_id:<10} #{svg_number:<9} ({start[0]:.1f},{start[1]:.1f}){'':<8} ({end[0]:.1f},{end[1]:.1f}){'':<8} {status}\n"
                            svg_number += 1
            
            # Dodaj nieprzypisane segmenty (bƒôdƒÖ mia≈Çy inne numery na SVG)
            for segment in self.unassigned_segments:
                seg_id = segment.get('id')
                start = segment.get('start', [0, 0])  
                end = segment.get('end', [0, 0])
                status = "üî¥ NIEPRZYPISANY"
                
                content += f"{seg_id:<10} #{svg_number:<9} ({start[0]:.1f},{start[1]:.1f}){'':<8} ({end[0]:.1f},{end[1]:.1f}){'':<8} {status}\n"
                svg_number += 1
            
            content += "\n" + "=" * 80 + "\n"
            content += f"PODSUMOWANIE:\n"
            content += f"‚Ä¢ Ca≈Çkowita liczba segment√≥w: {len(self.all_segments)}\n"
            content += f"‚Ä¢ Nieprzypisanych: {len(self.unassigned_segments)}\n"
            content += f"‚Ä¢ Przypisanych: {len(self.all_segments) - len(self.unassigned_segments)}\n\n"
            content += "UWAGA: Numery 'Nr na SVG' to numeracja wy≈õwietlana na rysunku SVG\n"
            content += "       (rozpoczyna siƒô od #1 i ro≈õnie globalnie)"
            
            scroll_text.insert('1.0', content)
            scroll_text.configure(state='disabled')
            
            # Przycisk zamknij
            ttk.Button(main_frame, text="Zamknij", command=map_window.destroy).pack(pady=5)
            
            self.log_message("Pokazano mapƒô numer√≥w segment√≥w")
            
        except Exception as e:
            self.log_message(f"B≈ÇƒÖd pokazywania mapy numer√≥w: {e}", "ERROR")
            messagebox.showerror("B≈ÇƒÖd", f"Nie mo≈ºna pokazaƒá mapy numer√≥w:\n{e}")
    
    def reload_data_fresh(self):
        """Za≈Çaduj dane od nowa (restart assignment√≥w)"""
        try:
            if not hasattr(self, 'last_conversion_data') or not self.last_conversion_data:
                messagebox.showwarning("Uwaga", "Brak danych do prze≈Çadowania. Wykonaj najpierw konwersjƒô DXF.")
                return
            
            # Potwierd≈∫ reset
            if not messagebox.askyesno("Potwierdzenie", 
                                      "Czy na pewno chcesz zresetowaƒá wszystkie przypisania i zaczƒÖƒá od nowa?\n\nWszystkie niezapisane zmiany zostanƒÖ utracone!"):
                return
            
            # Resetuj dane do stanu poczƒÖtkowego
            self.assignment_changes = {'new_assignments': [], 'skipped_texts': []}
            
            # Przywr√≥ƒá oryginalne dane z konwersji
            original_data = self.last_conversion_data
            self.all_texts = original_data.get('station_texts', []).copy()
            self.unassigned_texts = original_data.get('unassigned_texts', []).copy()
            
            # Przypisane segmenty z assigned_data
            assigned_segments = []
            assigned_data = original_data.get('assigned_data', {})
            for inv_id, strings in assigned_data.items():
                for str_id, segments in strings.items():
                    if segments:
                        assigned_segments.extend(segments)
            
            self.all_segments = assigned_segments + original_data.get('unassigned_segments', [])
            self.unassigned_segments = original_data.get('unassigned_segments', []).copy()
            
            # Od≈õwie≈º listy
            self.populate_texts_list()
            self.populate_segments_list()
            
            # Wyczy≈õƒá wybory
            self.clear_selected_text()
            self.clear_selected_segment()
            
            # Wygeneruj SVG w stanie poczƒÖtkowym
            self.regenerate_and_refresh_svg()
            
            self.log_message("üîÑ Dane prze≈Çadowane - wszystkie przypisania zresetowane")
            messagebox.showinfo("Sukces", "Dane zosta≈Çy prze≈Çadowane. Wszystkie przypisania zresetowane.")
            
        except Exception as e:
            self.log_message(f"B≈ÇƒÖd prze≈Çadowania danych: {e}", "ERROR")
            messagebox.showerror("B≈ÇƒÖd", f"Nie mo≈ºna prze≈Çadowaƒá danych:\n{e}")
    
    def show_assignment_statistics(self):
        """Poka≈º statystyki przypisa≈Ñ"""
        try:
            # Oblicz statystyki
            total_texts = len(self.all_texts) if hasattr(self, 'all_texts') else 0
            unassigned_texts = len(self.unassigned_texts) if hasattr(self, 'unassigned_texts') else 0
            assigned_texts = total_texts - unassigned_texts
            
            total_segments = len(self.all_segments) if hasattr(self, 'all_segments') else 0
            unassigned_segments = len(self.unassigned_segments) if hasattr(self, 'unassigned_segments') else 0
            assigned_segments = total_segments - unassigned_segments
            
            new_assignments = len(self.assignment_changes.get('new_assignments', []))
            skipped_texts = len(self.assignment_changes.get('skipped_texts', []))
            
            # Utw√≥rz okno ze statystykami
            stats_window = tk.Toplevel(self.root)
            stats_window.title("Statystyki przypisa≈Ñ")
            stats_window.geometry("500x400")
            
            # Frame g≈Ç√≥wny
            main_frame = ttk.Frame(stats_window)
            main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
            
            # Tytu≈Ç
            title_label = ttk.Label(main_frame, text="üìä STATYSTYKI PRZYPISA≈É", 
                                   style='Title.TLabel', font=('Arial', 16, 'bold'))
            title_label.pack(pady=(0, 20))
            
            # Teksty
            texts_frame = ttk.LabelFrame(main_frame, text="Teksty", padding=10)
            texts_frame.pack(fill=tk.X, pady=5)
            
            ttk.Label(texts_frame, text=f"Wszystkich tekst√≥w: {total_texts}", 
                     font=('Arial', 12)).pack(anchor=tk.W)
            ttk.Label(texts_frame, text=f"üü¢ Przypisanych: {assigned_texts}", 
                     font=('Arial', 12), foreground='green').pack(anchor=tk.W)
            ttk.Label(texts_frame, text=f"üî¥ Nieprzypisanych: {unassigned_texts}", 
                     font=('Arial', 12), foreground='red').pack(anchor=tk.W)
            
            if total_texts > 0:
                progress_texts = (assigned_texts / total_texts) * 100
                ttk.Label(texts_frame, text=f"Postƒôp: {progress_texts:.1f}%", 
                         font=('Arial', 12, 'bold')).pack(anchor=tk.W)
            
            # Segmenty
            segments_frame = ttk.LabelFrame(main_frame, text="Segmenty", padding=10)
            segments_frame.pack(fill=tk.X, pady=5)
            
            ttk.Label(segments_frame, text=f"Wszystkich segment√≥w: {total_segments}", 
                     font=('Arial', 12)).pack(anchor=tk.W)
            ttk.Label(segments_frame, text=f"üü¢ Przypisanych: {assigned_segments}", 
                     font=('Arial', 12), foreground='green').pack(anchor=tk.W)
            ttk.Label(segments_frame, text=f"üî¥ Nieprzypisanych: {unassigned_segments}", 
                     font=('Arial', 12), foreground='red').pack(anchor=tk.W)
            
            if total_segments > 0:
                progress_segments = (assigned_segments / total_segments) * 100
                ttk.Label(segments_frame, text=f"Postƒôp: {progress_segments:.1f}%", 
                         font=('Arial', 12, 'bold')).pack(anchor=tk.W)
            
            # Sesja
            session_frame = ttk.LabelFrame(main_frame, text="Bie≈ºƒÖca sesja", padding=10)
            session_frame.pack(fill=tk.X, pady=5)
            
            ttk.Label(session_frame, text=f"Nowych przypisa≈Ñ: {new_assignments}", 
                     font=('Arial', 12)).pack(anchor=tk.W)
            ttk.Label(session_frame, text=f"Pominiƒôtych tekst√≥w: {skipped_texts}", 
                     font=('Arial', 12)).pack(anchor=tk.W)
            
            # Przycisk zamknij
            ttk.Button(main_frame, text="Zamknij", command=stats_window.destroy).pack(pady=20)
            
            self.log_message("Pokazano statystyki przypisa≈Ñ")
            
        except Exception as e:
            self.log_message(f"B≈ÇƒÖd pokazywania statystyk: {e}", "ERROR")
            messagebox.showerror("B≈ÇƒÖd", f"Nie mo≈ºna pokazaƒá statystyk:\n{e}")

    def on_auto_refresh_change(self):
        """Obs≈Çuga zmiany opcji auto-od≈õwie≈ºania SVG"""
        if self.auto_refresh_svg.get():
            self.log_message("üîÑ Auto-od≈õwie≈ºanie SVG w≈ÇƒÖczone - SVG bƒôdzie regenerowany po ka≈ºdym przypisaniu")
        else:
            self.log_message("‚ö° Auto-od≈õwie≈ºanie SVG wy≈ÇƒÖczone - szybsze przypisywanie, od≈õwie≈º rƒôcznie")

    def save_assignment_data(self):
        """Automatyczne zapisywanie danych przypisa≈Ñ po ka≈ºdej zmianie"""
        try:
            if not hasattr(self, 'last_conversion_data') or not self.assignment_changes['new_assignments']:
                return
            
            # Aktualizuj assigned_data z nowymi przypisaniami
            for assignment in self.assignment_changes['new_assignments']:
                text_data = assignment['text']
                segment_data = assignment['segment']
                text_id = text_data['id']
                
                # Znajd≈∫ lub utw√≥rz odpowiedni inverter
                inverter_id = list(self.last_conversion_data['assigned_data'].keys())[0] if self.last_conversion_data['assigned_data'] else "I01"
                
                if inverter_id not in self.last_conversion_data['assigned_data']:
                    self.last_conversion_data['assigned_data'][inverter_id] = {}
                
                if text_id not in self.last_conversion_data['assigned_data'][inverter_id]:
                    self.last_conversion_data['assigned_data'][inverter_id][text_id] = []
                
                # Dodaj segment (unikaj duplikat√≥w)
                segment_ids = [s.get('id') for s in self.last_conversion_data['assigned_data'][inverter_id][text_id]]
                if segment_data.get('id') not in segment_ids:
                    self.last_conversion_data['assigned_data'][inverter_id][text_id].append(segment_data)
            
            # Aktualizuj listy nieprzypisanych w danych
            self.last_conversion_data['unassigned_texts'] = self.unassigned_texts.copy()
            self.last_conversion_data['unassigned_segments'] = self.unassigned_segments.copy()
            
            self.log_message("üíæ Dane przypisa≈Ñ zapisane automatycznie")
            
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è B≈ÇƒÖd automatycznego zapisywania: {e}", "ERROR")

    def generate_final_structured_svg(self):
        """Generuj finalny structured SVG z wszystkimi zmianami"""
        try:
            if not hasattr(self, 'last_conversion_data'):
                messagebox.showerror("B≈ÇƒÖd", "Brak danych do generowania. Wykonaj najpierw konwersjƒô DXF.")
                return
            
            # Poka≈º dialog potwierdzenia
            structured_filename = self.config_manager.get('STRUCTURED_SVG_OUTPUT', 'output_structured.svg')
            result = messagebox.askyesno(
                "Generowanie Structured SVG", 
                f"Czy wygenerowaƒá finalny structured SVG z {len(self.assignment_changes['new_assignments'])} zmianami?\n\n" +
                f"Plik zostanie zapisany jako '{structured_filename}'"
            )
            
            if not result:
                return
            
            self.log_message("üîß Generowanie finalnego structured SVG...")
            
            # WA≈ªNE: Upewnij siƒô ≈ºe config jest aktualny
            self.config_manager.apply_to_config_module()
            import src.core.config as config
            self.log_message(f"üîß DEBUG: Aktualna warto≈õƒá config.MPTT_HEIGHT = {config.MPTT_HEIGHT}")
            
            # U≈ºyj aktualnych danych z wszystkimi zmianami (preferuj AssignmentManager)
            from src.svg.svg_generator import generate_structured_svg
            
            if hasattr(self, 'assignment_manager') and self.assignment_manager:
                # U≈ºyj danych z AssignmentManager (najaktualniejsze)
                current_assigned_data = self.assignment_manager.current_assigned_data
                current_unassigned_texts = self.assignment_manager.unassigned_texts
                current_unassigned_segments = self.assignment_manager.unassigned_segments
                self.log_message("üìä U≈ºywam danych z AssignmentManager")
            else:
                # Fallback do danych GUI
                current_assigned_data = self.assigned_data if hasattr(self, 'assigned_data') else self.last_conversion_data['assigned_data']
                current_unassigned_texts = self.unassigned_texts
                current_unassigned_segments = self.unassigned_segments
                self.log_message("üìä U≈ºywam danych z GUI")
            
            # Pobierz konfiguracjƒô dla station_id
            config_params = self.get_dxf_config_params()
            station_id = config_params.get('station_id')
            
            generate_structured_svg(
                current_assigned_data,                        # NAJAKTUALNIEJSZE dane!
                self.last_conversion_data['station_texts'],   # wszystkie teksty stacji
                current_unassigned_texts,                     # aktualne nieprzypisane teksty
                current_unassigned_segments,                  # aktualne nieprzypisane segmenty
                structured_filename,                          # konfigurowalna nazwa pliku
                station_id                                    # ID stacji
            )
            
            self.log_message(f"‚úÖ Finalny structured SVG wygenerowany: {structured_filename}")
            messagebox.showinfo("Sukces", f"Finalny structured SVG zosta≈Ç wygenerowany!\n\nPlik: {structured_filename}")
            
            # Zapytaj czy prze≈ÇƒÖczyƒá widok
            if messagebox.askyesno("Prze≈ÇƒÖczyƒá widok?", "Czy chcesz prze≈ÇƒÖczyƒá widok na structured SVG?"):
                self.current_svg_path.set(structured_filename)
                self.current_display_mode.set("structured")
                self.change_display_mode()
            
        except Exception as e:
            self.log_message(f"‚ùå B≈ÇƒÖd generowania structured SVG: {e}", "ERROR")
            messagebox.showerror("B≈ÇƒÖd", f"Nie mo≈ºna wygenerowaƒá structured SVG:\n{e}")

    def save_assignments(self):
        """Zapisanie zmian przypisa≈Ñ"""
        try:
            if not self.assignment_changes['new_assignments']:
                self.log_message("Brak zmian do zapisania")
                return
            
            # Poka≈º podsumowanie zmian
            changes_count = len(self.assignment_changes['new_assignments'])
            confirm_msg = f"Czy zapisaƒá {changes_count} nowych przypisa≈Ñ?\n\n"
            
            for i, assignment in enumerate(self.assignment_changes['new_assignments']):  # Poka≈º wszystkie
                text_id = assignment['text']['id']
                segment_id = assignment['segment']['id']
                confirm_msg += f"‚Ä¢ {text_id} ‚Üí Segment #{segment_id}\n"
            
            if changes_count > 5:
                confirm_msg += f"... i {changes_count - 5} wiƒôcej"
            
            if not messagebox.askyesno("Potwierdzenie", confirm_msg):
                return
            
            self.log_message(f"Zapisywanie {changes_count} zmian przypisa≈Ñ...")
            
            # Pobierz dane z ostatniej konwersji
            assigned_data = self.last_conversion_data.get('assigned_data', {})
            station_texts = self.last_conversion_data.get('station_texts', [])
            
            # Zastosuj nowe przypisania
            for assignment in self.assignment_changes['new_assignments']:
                text_data = assignment['text']
                segment_data = assignment['segment']
                
                # Znajd≈∫ odpowiedni inverter (u≈ºywamy pierwszego dostƒôpnego)
                inverter_id = list(assigned_data.keys())[0] if assigned_data else "I01"
                if inverter_id not in assigned_data:
                    assigned_data[inverter_id] = {}
                
                # Dodaj segment do stringa tekstowego
                text_id = text_data['id']
                if text_id not in assigned_data[inverter_id]:
                    assigned_data[inverter_id][text_id] = []
                
                assigned_data[inverter_id][text_id].append(segment_data)
                self.log_message(f"Przypisano segment #{segment_data['id']} do {text_id}")
            
            # Regeneruj SVG z nowymi przypisaniami
            from src.svg.svg_generator import generate_interactive_svg
            
            # Pobierz aktualnie nieprzypisane elementy
            remaining_unassigned_texts = []
            for text in self.unassigned_texts:
                # Sprawd≈∫ czy nie zosta≈Ç przypisany
                is_assigned = any(a['text']['id'] == text['id'] for a in self.assignment_changes['new_assignments'])
                if not is_assigned:
                    remaining_unassigned_texts.append(text)
            
            remaining_unassigned_segments = []
            for segment in self.unassigned_segments:
                # Sprawd≈∫ czy nie zosta≈Ç przypisany
                is_assigned = any(a['segment']['id'] == segment['id'] for a in self.assignment_changes['new_assignments'])
                if not is_assigned:
                    remaining_unassigned_segments.append(segment)
            
            # Pobierz konfiguracjƒô dla station_id
            config_params = self.get_dxf_config_params()
            station_id = config_params.get('station_id')
            
            # Wygeneruj nowy SVG
            generate_interactive_svg(
                assigned_data, 
                station_texts, 
                remaining_unassigned_texts, 
                remaining_unassigned_segments, 
                "interactive_assignment.svg",
                station_id
            )
            
            # Od≈õwie≈º widok
            self.refresh_svg()
            
            # Wyczy≈õƒá zmiany po zapisaniu
            self.assignment_changes = {'new_assignments': [], 'skipped_texts': []}
            
            # Zaktualizuj listy nieprzypisanych element√≥w
            self.unassigned_texts = remaining_unassigned_texts
            self.unassigned_segments = remaining_unassigned_segments
            
            self.log_message(f"‚úÖ Zapisano {changes_count} zmian i zaktualizowano SVG")
            messagebox.showinfo("Sukces", f"Zapisano {changes_count} przypisa≈Ñ")
            
        except Exception as e:
            self.log_message(f"B≈ÇƒÖd zapisywania: {e}", "ERROR")
            messagebox.showerror("B≈ÇƒÖd", f"Nie mo≈ºna zapisaƒá zmian:\\n{e}")
    
    # Metody pomocnicze
    def log_message(self, message, level="INFO"):
        """Dodanie wiadomo≈õci do loga z kolorami i obs≈ÇugƒÖ \\n"""
        import datetime
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        
        # Zamie≈Ñ \\n na prawdziwe znaki nowej linii
        formatted_message = message.replace('\\n', '\n')
        
        # Definiuj kolory dla r√≥≈ºnych poziom√≥w
        colors = {
            "INFO": "blue",
            "SUCCESS": "green", 
            "WARNING": "orange",
            "ERROR": "red",
            "DEBUG": "gray"
        }
        
        color = colors.get(level, "black")
        
        # Dodaj timestamp i poziom
        log_entry = f"[{timestamp}] {level}: {formatted_message}\n"
        
        # Dodaj tekst z kolorem
        current_pos = self.log_text.index(tk.END)
        self.log_text.insert(tk.END, log_entry)
        
        # Ustaw kolor tylko dla tej linii
        line_start = current_pos
        line_end = self.log_text.index(tk.END)
        
        # Utw√≥rz tag z kolorem je≈õli nie istnieje
        tag_name = f"color_{level}"
        self.log_text.tag_configure(tag_name, foreground=color)
        self.log_text.tag_add(tag_name, line_start, line_end)
        
        self.log_text.see(tk.END)
        
        # Ogranicz liczbƒô linii w logu
        lines = self.log_text.get("1.0", tk.END).split('\n')
        if len(lines) > 1000:  # Zwiƒôkszono limit do 1000
            self.log_text.delete("1.0", "50.0")  # Usu≈Ñ 50 linii na raz
    
    def log_success(self, message):
        """Wiadomo≈õƒá sukcesu"""
        self.log_message(message, "SUCCESS")
    
    def log_warning(self, message):
        """Wiadomo≈õƒá ostrze≈ºenia"""
        self.log_message(message, "WARNING")
    
    def log_error(self, message):
        """Wiadomo≈õƒá b≈Çƒôdu"""
        self.log_message(message, "ERROR")
    
    def load_default_files(self):
        """≈Åadowanie domy≈õlnych plik√≥w"""
        # Sprawd≈∫ domy≈õlny plik DXF z konfiguracji
        default_dxf = self.config_manager.get('DEFAULT_DXF_FILE', 'input.dxf')
        if os.path.exists(default_dxf):
            self.current_dxf_path.set(os.path.abspath(default_dxf))
            self.log_message(f"Za≈Çadowano domy≈õlny plik DXF: {default_dxf}")
        
        # Ustaw domy≈õlny plik SVG z konfiguracji
        default_svg = self.config_manager.get('STRUCTURED_SVG_OUTPUT', 'output_structured.svg')
        self.current_svg_path.set(default_svg)
        
        # Sprawd≈∫ domy≈õlny plik SVG i ustaw tryb wy≈õwietlania
        self.change_display_mode()
        
        # Sprawd≈∫ czy istniejƒÖ pliki z poprzednich konwersji
        self.update_interactive_info()
    
    def run(self):
        """Uruchomienie GUI"""
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            print("\\n‚ö†Ô∏è Przerwano przez u≈ºytkownika")
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd GUI: {e}")
            import traceback
            traceback.print_exc()


if __name__ == "__main__":
    import argparse
    
    # Obs≈Çuga argument√≥w wiersza polece≈Ñ
    parser = argparse.ArgumentParser(description='DXF2SVG Interactive GUI')
    parser.add_argument('--config', '-c', type=str, help='Nazwa pliku konfiguracyjnego (bez rozszerzenia .cfg)')
    args = parser.parse_args()
    
    # Uruchom aplikacjƒô z opcjonalnƒÖ konfiguracjƒÖ
    app = InteractiveGUI(config_file=args.config)
    app.run()
